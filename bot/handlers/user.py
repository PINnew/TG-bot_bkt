import asyncio
import os
import csv
import tempfile

import aiogram
from aiogram import Router, F
from aiogram.types import Message, Contact, FSInputFile
from aiogram.filters import CommandStart, Command
from bot.keyboards.reply import kb_share_contact
from bot.database.db import get_all_participants, add_participant, get_all_participants_data
# from bot.keyboards.inline import get_start_keyboard
from bot.database.db import get_participant_by_id
from aiogram.exceptions import TelegramForbiddenError

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS").split(",")))

router = Router(name="user_router")


@router.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username

    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ¬´–ë–µ–≥, –ö–æ—Ñ–µ, –¢–∞–Ω—Ü—ã¬ª. \n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–≤–æ–π."
    )

    if not username:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –≤ Telegram:")
        return
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º username
        message.bot.db_state[user_id] = {"username": username}
        await message.answer("<<–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º>> –∫–Ω–æ–ø–∫–∞ –≤–Ω–∏–∑—É.", reply_markup=kb_share_contact)


@router.message(F.text)
async def process_username(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω?
    pool = message.bot.dp.pool
    existing_user = await get_participant_by_id(pool, user_id)
    if existing_user:
        return  # –ù–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ username –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    state = message.bot.db_state.get(user_id, {})
    if "username" in state:
        return  # –£–∂–µ –µ—Å—Ç—å username, –∂–¥—ë–º –∫–æ–Ω—Ç–∞–∫—Ç

    # –ï—Å–ª–∏ username –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    state["username"] = message.text.strip()
    message.bot.db_state[user_id] = state

    await message.answer(
        "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞. \n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É.",
        reply_markup=kb_share_contact
    )


@router.message(F.contact)
async def process_phone(message: Message):
    user_id = message.from_user.id
    phone_number = message.contact.phone_number
    state = message.bot.db_state.get(user_id, {})

    username = state.get("username")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω?
    pool = message.bot.dp.pool
    existing_user = await get_participant_by_id(pool, user_id)
    if existing_user:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return

    try:
        await add_participant(pool, user_id, username, phone_number)
        del message.bot.db_state[user_id]
        await message.answer(
            "–°–ø–∞—Å–∏–±–æ! \n"
            "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ¬´–ë–µ–≥, –ö–æ—Ñ–µ, –¢–∞–Ω—Ü—ã¬ª. \n"
            "–ó–∞ –¥–µ–Ω—å –¥–æ —Å–æ–±—ã—Ç–∏—è –º—ã –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º –æ –≤—Å—Ç—Ä–µ—á–µ!"
        )
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
    finally:
        # –í–°–ï–ì–î–ê —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞
        if user_id in message.bot.db_state:
            del message.bot.db_state[user_id]


@router.message(Command("list"))
async def cmd_list(message: Message):
    user_id = message.from_user.id
    pool = message.bot.dp.pool

    # –û—Ç–ª–∞–¥–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    existing_user = await get_participant_by_id(pool, user_id)
    if not existing_user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    participants = await get_all_participants(pool)
    count = len(participants)

    await message.answer(f"–ù–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {count} —á–µ–ª–æ–≤–µ–∫.")


@router.message(Command("export"))
async def cmd_export(message: Message):
    user_id = message.from_user.id

    if user_id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    pool = message.bot.dp.pool
    participants = await get_all_participants_data(pool)

    if not participants:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return

    with tempfile.NamedTemporaryFile(mode='w+', newline='', encoding='utf-8', delete=False) as tmpfile:
        fieldnames = ['telegram_user_id', 'username', 'phone_number', 'registration_time', 'reminder_sent']
        writer = csv.DictWriter(tmpfile, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(participants)
        tmpfile_path = tmpfile.name

    csv_file_path = "participants_export.csv"
    os.rename(tmpfile_path, csv_file_path)

    file = FSInputFile(csv_file_path)
    await message.answer_document(file, caption="üìé –í—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:")


@router.message(Command("broadcast"))
async def cmd_broadcast(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /broadcast [—Å–æ–æ–±—â–µ–Ω–∏–µ]")
        return

    broadcast_text = args[1]

    pool = message.bot.dp.pool
    participants = await get_all_participants(pool)

    success_count = 0
    blocked_count = 0

    for user_id in participants:
        try:
            await message.bot.send_message(user_id, broadcast_text)
            success_count += 1
            await asyncio.sleep(0.05)  # —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ
        except aiogram.exceptions.TelegramForbiddenError:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
            blocked_count += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"üì¨ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–∏: {success_count} —á–µ–ª–æ–≤–µ–∫.\n"
        f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {blocked_count} —á–µ–ª–æ–≤–µ–∫."
    )
